// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String    @id @default(cuid())
    name             String?
    email            String?   @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    posts            Post[]
    ownedWorkouts    Workout[] @relation("owner") // Adjusting for the `owner` relation
    authoredWorkouts Workout[] @relation("author") // New relation for the `author` field
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Workout {
    id          Int               @id @default(autoincrement())
    title       String
    description String?
    /// This is the original creator. (This might need to be refactored because workout copy's can be changed so much it's nothing like the og. maybe something like authors: User[])
    authorId    String
    author      User              @relation(fields: [authorId], references: [id], onDelete: Cascade, name: "author")
    /// This is who has the ability to edit this workout. It can be a copy of the author's workout that this user can edit.
    ownerId     String
    owner       User              @relation(fields: [ownerId], references: [id], onDelete: Cascade, name: "owner")
    routine     WorkoutExercise[]
    WorkoutLog  WorkoutLog[]
}

// each exercise in the workout routine. each individual exercise has ONE workout, and one workoutlog
model WorkoutExercise {
    id Int @id @default(autoincrement())

    exerciseName    String
    musclesTargeted MuscleGroups[]
    sets            SingleSet[]
    workout         Workout        @relation(fields: [workoutId], references: [id])
    workoutId       Int
    workoutLog      WorkoutLog?    @relation(fields: [workoutLogId], references: [id])
    workoutLogId    Int?

    @@map("Routine")
}

model MuscleGroups {
    name     String            @id
    routines WorkoutExercise[]

    @@unique([name])
}

model SingleSet {
    id                Int             @id @default(autoincrement())
    workoutExerciseId Int
    workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
    weight            Int
    reps              Int
    restTime          Int
}

model WorkoutLog {
    id              Int               @id @default(autoincrement())
    workoutTemplate Workout           @relation(fields: [workoutId], references: [id])
    workoutId       Int
    loggedRoutine   WorkoutExercise[]
}
